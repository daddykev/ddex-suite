/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface ParseOptions {
  mode?: string
  autoThreshold?: number
  resolveReferences?: boolean
  includeRaw?: boolean
  maxMemory?: number
  timeoutMs?: number
  allowBlocking?: boolean
  chunkSize?: number
}
export interface StreamOptions {
  chunkSize?: number
  maxMemory?: number
}
export interface ParsedMessage {
  messageId: string
  messageType: string
  messageDate: string
  senderName: string
  senderId: string
  recipientName: string
  recipientId: string
  version: string
  profile?: string
  releaseCount: number
  trackCount: number
  dealCount: number
  resourceCount: number
  totalDurationSeconds: number
}
export interface SanityCheckResult {
  isValid: boolean
  version: string
  errors: Array<string>
  warnings: Array<string>
}
export interface StreamedRelease {
  releaseReference: string
  title: string
  releaseType?: string
  resourceCount: number
}
export interface ProgressInfo {
  bytesProcessed: number
  releasesParsed: number
  elapsedMs: number
}
export declare class DdexParser {
  constructor()
  detectVersion(xml: string): string
  parseSync(xml: string, options?: ParseOptions | undefined | null): ParsedMessage
  parse(xml: string, options?: ParseOptions | undefined | null): Promise<ParsedMessage>
  sanityCheck(xml: string): Promise<SanityCheckResult>
  stream(xml: string, options?: StreamOptions | undefined | null): ReleaseStream
}
export declare class ReleaseStream {
  next(): Promise<StreamedRelease | null>
  progress(): Promise<ProgressInfo>
}
