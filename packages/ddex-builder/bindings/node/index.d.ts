/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Release {
  releaseId: string
  releaseType: string
  title: string
  artist: string
  label?: string
  catalogNumber?: string
  upc?: string
  releaseDate?: string
  genre?: string
  parentalWarning?: boolean
  trackIds: Array<string>
  metadata?: Record<string, string>
}
export interface Resource {
  resourceId: string
  resourceType: string
  title: string
  artist: string
  isrc?: string
  duration?: string
  trackNumber?: number
  volumeNumber?: number
  metadata?: Record<string, string>
}
export interface ValidationResult {
  isValid: boolean
  errors: Array<string>
  warnings: Array<string>
}
export interface BuilderStats {
  releasesCount: number
  resourcesCount: number
  totalBuildTimeMs: number
  lastBuildSizeBytes: number
  validationErrors: number
  validationWarnings: number
}
export interface PresetInfo {
  name: string
  description: string
  version: string
  profile: string
  requiredFields: Array<string>
  disclaimer: string
}
export interface ValidationRule {
  fieldName: string
  ruleType: string
  message: string
  parameters?: Record<string, string>
}
export interface StreamingConfig {
  maxBufferSize: number
  deterministic: boolean
  validateDuringStream: boolean
  progressCallbackFrequency: number
}
export interface StreamingProgress {
  releasesWritten: number
  resourcesWritten: number
  bytesWritten: number
  currentMemoryUsage: number
  estimatedCompletionPercent?: number
}
export interface StreamingStats {
  releasesWritten: number
  resourcesWritten: number
  dealsWritten: number
  bytesWritten: number
  warnings: Array<string>
  peakMemoryUsage: number
}
export interface MessageHeader {
  messageId?: string
  messageSenderName: string
  messageRecipientName: string
  messageCreatedDateTime?: string
}
export declare function batchBuild(requests: Array<string>): Promise<Array<string>>
export declare function validateStructure(xml: string): Promise<ValidationResult>
export declare class DdexBuilder {
  constructor()
  addRelease(release: Release): void
  addResource(resource: Resource): void
  build(): Promise<string>
  validate(): Promise<ValidationResult>
  getStats(): BuilderStats
  reset(): void
  getAvailablePresets(): Array<string>
  getPresetInfo(presetName: string): PresetInfo
  applyPreset(presetName: string): void
  getPresetValidationRules(presetName: string): Array<ValidationRule>
}
export declare class StreamingDdexBuilder {
  constructor(config?: StreamingConfig | undefined | null)
  setProgressCallback(callback: (...args: any[]) => any): void
  setEstimatedTotal(total: number): void
  startMessage(header: MessageHeader, version: string): void
  writeResource(resourceId: string, title: string, artist: string, isrc?: string | undefined | null, duration?: string | undefined | null, filePath?: string | undefined | null): string
  finishResourcesStartReleases(): void
  writeRelease(releaseId: string, title: string, artist: string, label: string | undefined | null, upc: string | undefined | null, releaseDate: string | undefined | null, genre: string | undefined | null, resourceReferences: Array<string>): string
  finishMessage(): StreamingStats
  getXml(): string
  reset(): void
}
